import streamlit as st
import pandas as pd
import requests

# ---------- Giao di·ªán ch√≠nh ----------
st.set_page_config(page_title="E-Commerce Recommender", layout="wide")
st.title("üõí E-Commerce Recommender System")
st.markdown("Kh√°m ph√° h·ªá th·ªëng g·ª£i √Ω s·∫£n ph·∫©m b·∫±ng m√¥ h√¨nh Hybrid v√† BERT4Rec.")

# ---------- Config ----------
API_URL = "http://127.0.0.1:5001"
PRODUCT_CSV = r"C:\Users\PC\OneDrive\Dokumen\recom\ecom_recommendation_project\data\products.csv"

# ---------- Load d·ªØ li·ªáu s·∫£n ph·∫©m ----------
@st.cache_data
def load_products():
    return pd.read_csv(PRODUCT_CSV)

products_df = load_products()
categories = products_df["primary_category"].dropna().unique()
tab1, tab2 = st.tabs(["üì¶ Hybrid Recommender", "üß† BERT4Rec Recommender"])

# ---------- Tab 1: Hybrid Recommender ----------
with tab1:
    st.subheader("üì¶ Hybrid Recommendation theo S·∫£n ph·∫©m")
    st.markdown("Ch·ªçn m·ªôt danh m·ª•c v√† s·∫£n ph·∫©m c·ª• th·ªÉ ƒë·ªÉ xem c√°c s·∫£n ph·∫©m t∆∞∆°ng t·ª± ƒë∆∞·ª£c g·ª£i √Ω.")

    col1, col2 = st.columns([1, 2])

    with col1:
        selected_category = st.selectbox("üîé Ch·ªçn danh m·ª•c s·∫£n ph·∫©m:", sorted(categories))

    filtered_products = products_df[products_df["primary_category"] == selected_category]

    with col2:
        product_options = filtered_products.apply(lambda x: f"{x['product_name']} (ID: {x['product_id']})", axis=1)
        selected_product_label = st.selectbox("üéØ Ch·ªçn s·∫£n ph·∫©m:", product_options)
        product_id = selected_product_label.split("ID: ")[-1].replace(")", "")

    num_recs = st.slider("üìå S·ªë l∆∞·ª£ng g·ª£i √Ω:", min_value=1, max_value=10, value=5)

    if st.button("üì• L·∫•y g·ª£i √Ω t·ª´ Hybrid Model"):
        try:
            params = {"product_id": product_id, "num_recommendations": num_recs}
            response = requests.get(f"{API_URL}/recommend/hybrid", params=params)
            response.raise_for_status()
            recs = response.json()["recommendations"]

            if recs:
                st.success("‚úÖ G·ª£i √Ω s·∫£n ph·∫©m th√†nh c√¥ng!")
                st.dataframe(pd.DataFrame(recs), use_container_width=True)
            else:
                st.warning("Kh√¥ng t√¨m th·∫•y g·ª£i √Ω ph√π h·ª£p.")
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói khi g·ªçi API: {e}")

# ---------- Tab 2: BERT4Rec Recommender ----------
with tab2:
    st.subheader("üë§ G·ª£i √Ω theo Ng∆∞·ªùi d√πng v·ªõi BERT4Rec")
    st.markdown("Ch·ªçn m·ªôt ng∆∞·ªùi d√πng v√† s·ªë l∆∞·ª£ng s·∫£n ph·∫©m mu·ªën g·ª£i √Ω.")

    try:
        users_response = requests.get(f"{API_URL}/users")
        users_response.raise_for_status()
        author_ids = users_response.json().get("author_ids", [])
    except Exception as e:
        author_ids = []
        st.error(f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng t·ª´ API: {e}")

    if author_ids:
        col1, col2 = st.columns(2)
        with col1:
            sorted_author_ids = sorted(author_ids)[:100]  # Gi·ªõi h·∫°n ch·ªâ l·∫•y 100 ng∆∞·ªùi ƒë·∫ßu ƒë·ªÉ g·ª£i √Ω
            selected_user = st.selectbox("üôç‚Äç‚ôÇÔ∏è Ch·ªçn ng∆∞·ªùi d√πng:", sorted(sorted_author_ids))
        with col2:
            topk = st.slider("üìå S·ªë s·∫£n ph·∫©m mu·ªën g·ª£i √Ω:", min_value=1, max_value=20, value=5)

        # Hi·ªÉn th·ªã c√°c s·∫£n ph·∫©m ƒë√£ t∆∞∆°ng t√°c
        try:
            history_params = {"author_id": selected_user}
            history_response = requests.get(f"{API_URL}/user_interactions", params=history_params)
            history_response.raise_for_status()
            history = history_response.json()

            if history:
                st.markdown("üïò **L·ªãch s·ª≠ t∆∞∆°ng t√°c c·ªßa ng∆∞·ªùi d√πng**")
                st.dataframe(pd.DataFrame(history), use_container_width=True)
            # else:
            #     st.info("‚ÑπÔ∏è Ng∆∞·ªùi d√πng n√†y ch∆∞a c√≥ t∆∞∆°ng t√°c n√†o.")
        except Exception as e:
            st.error(f"üö® Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ t∆∞∆°ng t√°c: {e}")

        if st.button("üì• L·∫•y g·ª£i √Ω t·ª´ BERT4Rec"):
            try:
                params = {"author_id": selected_user, "topk": topk}
                response = requests.get(f"{API_URL}/recommend/bert4rec", params=params)
                response.raise_for_status()
                recs = response.json()["recommendations"]

                if recs:
                    st.success("G·ª£i √Ω s·∫£n ph·∫©m th√†nh c√¥ng!")
                    st.dataframe(pd.DataFrame(recs), use_container_width=True)
                else:
                    st.warning("Ng∆∞·ªùi d√πng n√†y ch∆∞a c√≥ l·ªãch s·ª≠ mua h√†ng ƒë·ªß ƒë·ªÉ g·ª£i √Ω.")
            except Exception as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói khi g·ªçi API: {e}")

    else:
        st.warning("Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o ƒë·ªÉ g·ª£i √Ω. H√£y ƒë·∫£m b·∫£o API ƒëang ch·∫°y v√† d·ªØ li·ªáu ƒë∆∞·ª£c load.")
